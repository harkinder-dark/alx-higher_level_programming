////////////////////////////////////////////////////////////////////////////////////
5. Max integer - Unittest
mandatory
Depuis le début, vous créez des "tests interactifs". Pour cet exercice,
vous ajouterez Unittests.

Dans cette tâche, vous écrirez des tests unitaires pour la fonction 
def max_integer(list=[]):.

Votre fichier de test doit se trouver dans un dossier tests
Il faut utiliser le module unittest
Votre fichier de test doit être des fichiers python (extension : .py)
Votre fichier de test doit être exécuté à l'aide de cette commande :
python3 -m tests unitaires.6-max_integer_test
Tous les tests que vous faites doivent être passables par la fonction ci-dessous
Nous vous encourageons vivement à travailler ensemble sur des cas de test,
afin que vous ne manquiez aucun avantage


Since the beginning you have been creating “Interactive tests”. For this exercise, 
you will add Unittests.

In this task, you will write unittests for the function def max_integer(list=[]):.

Your test file should be inside a folder tests
You have to use the unittest module
Your test file should be python files (extension: .py)
Your test file should be executed by using this command: 
python3 -m unittest tests.6-max_integer_test
All tests you make must be passable by the function below
We strongly encourage you to work together on test cases, 
so that you don’t miss any edge case
guillaume@ubuntu:~/0x07$ cat 6-max_integer.py
#!/usr/bin/python3
"""Module to find the max integer in a list
"""


def max_integer(list=[]):
    """Function to find and return the max integer in a list of integers
        If the list is empty, the function returns None
    """
    if len(list) == 0:
        return None
    result = list[0]
    i = 1
    while i < len(list):
        if list[i] > result:
            result = list[i]
        i += 1
    return result

guillaume@ubuntu:~/0x07$ 
guillaume@ubuntu:~/0x07$ cat 6-main.py
#!/usr/bin/python3
max_integer = __import__('6-max_integer').max_integer

print(max_integer([1, 2, 3, 4]))
print(max_integer([1, 3, 4, 2]))
guillaume@ubuntu:~/0x07$
guillaume@ubuntu:~/0x07$ ./6-main.py
4
4
guillaume@ubuntu:~/0x07$
guillaume@ubuntu:~/0x07$ python3 -m unittest tests.6-max_integer_test 2>&1 | tail -1
OK
guillaume@ubuntu:~/0x07$
guillaume@ubuntu:~/0x07$ head -7 tests/6-max_integer_test.py 
#!/usr/bin/python3
"""Unittest for max_integer([..])
"""
import unittest
max_integer = __import__('6-max_integer').max_integer

class TestMaxInteger(unittest.TestCase):
guillaume@ubuntu:~/0x07$ 
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x07-python-test_driven_development
File: tests/6-max_integer_test.py
/////////////////////////////////////////////////////////////////////////////////////
6. Matrix multiplication
#advanced
Ecrire une fonction qui multiplie 2 matrices :

Lire : Multiplication matricielle - produit matriciel uniquement (deux matrices)

Prototype : def matrix_mul(m_a, m_b) :

m_a et m_b doivent être validés avec ces exigences dans cet ordre

m_a et m_b doivent être une liste de listes d'entiers ou de flottants :

si m_a ou m_b n'est pas une liste : lever une exception TypeError avec
le message m_a doit être une liste ou m_b doit être une liste

si m_a ou m_b n'est pas une liste de listes : lever une exception TypeError avec
le message m_a doit être une liste de listes ou m_b doit être une liste de listes

si m_a ou m_b est vide (cela signifie : = [] ou = [[]]) : lever une ValueError
exception avec le message m_a ne peut pas être vide ou m_b ne peut pas être vide

si un élément de ces listes de listes n'est pas un entier ou un flottant :
lever une exception TypeError avec le message que m_a devrait contenir
uniquement des entiers ou des flottants ou m_b ne doit contenir que des entiers 
ou des flottants

si m_a ou m_b n'est pas un rectangle (toutes les "lignes" doivent être de la même 
taille) :
lever une exception TypeError avec le message que chaque ligne de m_a doit être de
la même taille ou chaque ligne de m_b doit être de la même taille

Si m_a et m_b ne peuvent pas être multipliés : lever une exception ValueError
avec le message m_a et m_b ne peuvent pas être multipliés

Vous n'êtes pas autorisé à importer un module



Write a function that multiplies 2 matrices:

Read: Matrix multiplication - only Matrix product (two matrices)

Prototype: def matrix_mul(m_a, m_b):

m_a and m_b must be validated with these requirements in this order

m_a and m_b must be an list of lists of integers or floats:

if m_a or m_b is not a list: raise a TypeError exception with 
the message m_a must be a list or m_b must be a list

if m_a or m_b is not a list of lists: raise a TypeError exception with 
the message m_a must be a list of lists or m_b must be a list of lists

if m_a or m_b is empty (it means: = [] or = [[]]): raise a ValueError 
exception with the message m_a can't be empty or m_b can't be empty

if one element of those list of lists is not an integer or a float: 
raise a TypeError exception with the message m_a should contain 
only integers or floats or m_b should contain only integers or floats

if m_a or m_b is not a rectangle (all ‘rows’ should be of the same size): 
raise a TypeError exception with the message each row of m_a must be of 
the same size or each row of m_b must be of the same size

If m_a and m_b can’t be multiplied: raise a ValueError exception 
with the message m_a and m_b can't be multiplied

You are not allowed to import any module

guillaume@ubuntu:~/0x07$ cat 100-main.py
#!/usr/bin/python3
matrix_mul = __import__('100-matrix_mul').matrix_mul

print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
print(matrix_mul([[1, 2]], [[3, 4], [5, 6]]))

guillaume@ubuntu:~/0x07$ ./100-main.py 
[[7, 10], [15, 22]]
[[13, 16]]
guillaume@ubuntu:~/0x07$ python3 -m doctest -v ./tests/100-matrix_mul.txt | tail -2
6 passed and 0 failed.
Test passed.
guillaume@ubuntu:~/0x07$
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x07-python-test_driven_development
File: 100-matrix_mul.py, tests/100-matrix_mul.txt
  
7. Lazy matrix multiplication
#advanced
Write a function that multiplies 2 matrices by using the module NumPy

To install it: pip3 install numpy==1.15.0

Prototype: def lazy_matrix_mul(m_a, m_b):
Test cases should be the same as 100-matrix_mul but with new exception type/message
guillaume@ubuntu:~/0x07$ cat 101-main.py
#!/usr/bin/python3
lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))

guillaume@ubuntu:~/0x07$ ./101-main.py 
[[ 7 10]
 [15 22]]
[[13 16]]
guillaume@ubuntu:~/0x07$ python3 -m doctest -v ./tests/101-lazy_matrix_mul.txt 
guillaume@ubuntu:~/0x07$ 
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x07-python-test_driven_development
File: 101-lazy_matrix_mul.py, tests/101-lazy_matrix_mul.txt
  
8. CPython #3: Python Strings
#advanced


Create a function that prints Python strings.

Prototype: void print_python_string(PyObject *p);
Format: see example
If p is not a valid string, print an error message (see example)
Read: Unicode HOWTO
About:

Python version: 3.4
You are allowed to use the C standard library
Your shared library will be compiled with this command line: 
gcc -shared -Wl,-soname,libPython.so -o libPython.so -fPIC -I/usr/include/python3.4 
102-python.c
julien@ubuntu:~/0x07. Pyhton Strings$ cat 102-tests.py
import ctypes

lib = ctypes.CDLL('./libPython.so')
lib.print_python_string.argtypes = [ctypes.py_object]
s = "The spoon does not exist"
lib.print_python_string(s)
s = "ложка не существует"
lib.print_python_string(s)
s = "La cuillère n'existe pas"
lib.print_python_string(s)
s = "勺子不存在"
lib.print_python_string(s)
s = "숟가락은 존재하지 않는다."
lib.print_python_string(s)
s = "スプーンは存在しない"
lib.print_python_string(s)
s = b"The spoon does not exist"
lib.print_python_string(s)
julien@ubuntu:~/0x07. Pyhton Strings$ gcc -shared -Wl,-soname,libPython.so -o 
libPython.so -fPIC -I/usr/include/python3.4 102-python.c
julien@ubuntu:~/0x07. Pyhton Strings$ python3 ./102-tests.py
[.] string object info
  type: compact ascii
  length: 24
  value: The spoon does not exist
[.] string object info
  type: compact unicode object
  length: 19
  value: ложка не существует
[.] string object info
  type: compact unicode object
  length: 24
  value: La cuillère n'existe pas
[.] string object info
  type: compact unicode object
  length: 5
  value: 勺子不存在
[.] string object info
  type: compact unicode object
  length: 14
  value: 숟가락은 존재하지 않는다.
[.] string object info
  type: compact unicode object
  length: 10
  value: スプーンは存在しない
[.] string object info
  [ERROR] Invalid String Object
julien@ubuntu:~/0x07. Pyhton Strings$ 
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x07-python-test_driven_development
File: 102-python.c