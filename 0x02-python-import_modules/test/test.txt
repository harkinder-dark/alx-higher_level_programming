4. Who are you?
mandatory
Écrivez un programme qui imprime tous les noms définis par le module compilé hidden_4.pyc (veuillez le télécharger localement).

Vous devez imprimer un nom par ligne, dans l'ordre alphabétique
Vous ne devez imprimer que les noms qui ne commencent pas par __
Votre code ne doit pas être exécuté lors de l'importation
Assurez-vous que vous exécutez votre code en Python3.8.x (hidden_4.pyc a été compilé avec cette version)



Write a program that prints all the names defined by the compiled module hidden_4.pyc (please download it locally).

You should print one name per line, in alpha order
You should print only names that do not start with __
Your code should not be executed when imported
Make sure you are running your code in Python3.8.x (hidden_4.pyc has been compiled with this version)
guillaume@ubuntu:~/0x02$ curl -Lso "hidden_4.pyc" "https://github.com/holbertonschool/0x02.py/raw/master/hidden_4.pyc"
guillaume@ubuntu:~/0x02$ ./4-hidden_discovery.py | sort
my_secret_santa
print_hidden
print_school
guillaume@ubuntu:~/0x02$ 
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x02-python-import_modules
File: 4-hidden_discovery.py
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
5. Everything can be imported
mandatory

Écrivez un programme qui importe la variable a du fichier variable_load_5.py et imprime sa valeur.

Vous n'êtes pas autorisé à utiliser * pour importer ou __import__
Votre code ne doit pas être exécuté lors de l'importation


Write a program that imports the variable a from the file variable_load_5.py and prints its value.

You are not allowed to use * for importing or __import__
Your code should not be executed when imported
guillaume@ubuntu:~/0x02$ cat variable_load_5.py
#!/usr/bin/python3
a = 98
"""Simple variable
"""

guillaume@ubuntu:~/0x02$ ./5-variable_load.py
98
guillaume@ubuntu:~/0x02$
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x02-python-import_modules
File: 5-variable_load.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
6. Build my own calculator!
#advanced
Écrivez un programme qui importe toutes les fonctions du fichier calculator_1.py et gère les opérations de base.

Utilisation : ./100-my_calculator.py a opérateur b
Si le nombre d'arguments n'est pas 3, votre programme doit :
print 
Utilisation : ./100-my_calculator.py <a> <opérateur> <b> suivi d'une nouvelle ligne
sortir avec la valeur 1
l'opérateur peut être :
+ pour plus
- pour la soustraction
* pour la multiplication
/ pour division
Si l'opérateur n'est pas l'un des ci-dessus :
print Opérateur inconnu. Opérateurs disponibles : +, -, * et / suivis d'une nouvelle ligne
sortir avec la valeur 1
Vous pouvez convertir a et b en entiers en utilisant int() (vous pouvez supposer que tous les arguments seront 
castables en entiers)
Le résultat doit être imprimé comme ceci : <a> <opérateur> <b> = <résultat>, suivi d'une nouvelle ligne
Vous n'êtes pas autorisé à utiliser * pour importer ou __import__
Votre code ne doit pas être exécuté lors de l'importation



Write a program that imports all functions from the file calculator_1.py and handles basic operations.

Usage: ./100-my_calculator.py a operator b
If the number of arguments is not 3, your program has to:
print 
Usage: ./100-my_calculator.py <a> <operator> <b> followed with a new line
exit with the value 1
operator can be:
+ for addition
- for subtraction
* for multiplication
/ for division
If the operator is not one of the above:
print Unknown operator. Available operators: +, -, * and / followed with a new line
exit with the value 1
You can cast a and b into integers by using int() (you can assume that all arguments will be castable into integers)
The result should be printed like this: <a> <operator> <b> = <result>, followed by a new line
You are not allowed to use * for importing or __import__
Your code should not be executed when imported
guillaume@ubuntu:~/0x02$ cat calculator_1.py
#!/usr/bin/python3
def add(a, b):
    """My addition function

    Args:
        a: first integer
        b: second integer

    Returns:
        The return value. a + b
    """
    return (a + b)


def sub(a, b):
    """My subtraction function

    Args:
        a: first integer
        b: second integer

    Returns:
        The return value. a - b
    """
    return (a - b)


def mul(a, b):
    """My multiplication function

    Args:
        a: first integer
        b: second integer

    Returns:
        The return value. a * b
    """
    return (a * b)


def div(a, b):
    """My division function

    Args:
        a: first integer
        b: second integer

    Returns:
        The return value. a / b
    """
    return int(a / b)

guillaume@ubuntu:~/0x02$ ./100-my_calculator.py ; echo $?
Usage: ./100-my_calculator.py <a> <operator> <b>
1
guillaume@ubuntu:~/0x02$ ./100-my_calculator.py 3 + 5 ; echo $?
3 + 5 = 8
0
guillaume@ubuntu:~/0x02$ ./100-my_calculator.py 3 H 5 ; echo $?
Unknown operator. Available operators: +, -, * and /
1
guillaume@ubuntu:~/0x02$
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x02-python-import_modules
File: 100-my_calculator.py
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
7. Easy print
#advanced
Write a program that prints #pythoniscool, followed by a new line, in the standard output.

Your program should be maximum 2 lines long
You are not allowed to use print or eval or open or import sys in your file 101-easy_print.py
guillaume@ubuntu:~/0x02$ ./101-easy_print.py
#pythoniscool
guillaume@ubuntu:~/0x02$ 
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x02-python-import_modules
File: 101-easy_print.py
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
8. ByteCode -> Python #3
#advanced
Write the Python function def magic_calculation(a, b): that does exactly the same as the following Python bytecode:

  3           0 LOAD_CONST               1 (0)
              3 LOAD_CONST               2 (('add', 'sub'))
              6 IMPORT_NAME              0 (magic_calculation_102)
              9 IMPORT_FROM              1 (add)
             12 STORE_FAST               2 (add)
             15 IMPORT_FROM              2 (sub)
             18 STORE_FAST               3 (sub)
             21 POP_TOP

  4          22 LOAD_FAST                0 (a)
             25 LOAD_FAST                1 (b)
             28 COMPARE_OP               0 (<)
             31 POP_JUMP_IF_FALSE       94

  5          34 LOAD_FAST                2 (add)
             37 LOAD_FAST                0 (a)
             40 LOAD_FAST                1 (b)
             43 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             46 STORE_FAST               4 (c)

  6          49 SETUP_LOOP              38 (to 90)
             52 LOAD_GLOBAL              3 (range)
             55 LOAD_CONST               3 (4)
             58 LOAD_CONST               4 (6)
             61 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             64 GET_ITER
        >>   65 FOR_ITER                21 (to 89)
             68 STORE_FAST               5 (i)

  7          71 LOAD_FAST                2 (add)
             74 LOAD_FAST                4 (c)
             77 LOAD_FAST                5 (i)
             80 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             83 STORE_FAST               4 (c)
             86 JUMP_ABSOLUTE           65
        >>   89 POP_BLOCK

  8     >>   90 LOAD_FAST                4 (c)
             93 RETURN_VALUE

 10     >>   94 LOAD_FAST                3 (sub)
             97 LOAD_FAST                0 (a)
            100 LOAD_FAST                1 (b)
            103 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
            106 RETURN_VALUE
            107 LOAD_CONST               0 (None)
            110 RETURN_VALUE
Tip: Python bytecode
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x02-python-import_modules
File: 102-magic_calculation.py
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
9. Fast alphabet
#advanced
Write a program that prints the alphabet in uppercase, followed by a new line.

Your program should be maximum 3 lines long
You are not allowed to use:
any loops
any conditional statements
str.join()
any string literal
any system calls
guillaume@ubuntu:~/0x02$ ./103-fast_alphabet.py
ABCDEFGHIJKLMNOPQRSTUVWXYZ
guillaume@ubuntu:~/0x02$ wc -l 103-fast_alphabet.py
3 103-fast_alphabet.py
guillaume@ubuntu:~/0x02$
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x02-python-import_modules
File: 103-fast_alphabet.py