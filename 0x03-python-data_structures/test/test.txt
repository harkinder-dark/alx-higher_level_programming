10. Only by 2
mandatory
Écrivez une fonction qui trouve tous les multiples de 2 dans une liste.

Prototype : def divisible_by_2(my_list=[]) :
Renvoie une nouvelle liste avec True ou False, selon que l'entier à la même position dans la liste d'origine
est un multiple de 2
La nouvelle liste doit avoir la même taille que la liste d'origine
Vous n'êtes pas autorisé à importer un module



Write a function that finds all multiples of 2 in a list.

Prototype: def divisible_by_2(my_list=[]):
Return a new list with True or False, depending on whether the integer at the same position in the original list 
is a multiple of 2
The new list should have the same size as the original list
You are not allowed to import any module
guillaume@ubuntu:~/0x03$ cat 10-main.py
#!/usr/bin/python3
divisible_by_2 = __import__('10-divisible_by_2').divisible_by_2

my_list = [0, 1, 2, 3, 4, 5, 6]
list_result = divisible_by_2(my_list)

i = 0
while i < len(list_result):
    print("{:d} {:s} divisible by 2".format(my_list[i], "is" if list_result[i] else "is not"))
    i += 1

guillaume@ubuntu:~/0x03$ ./10-main.py
0 is divisible by 2
1 is not divisible by 2
2 is divisible by 2
3 is not divisible by 2
4 is divisible by 2
5 is not divisible by 2
6 is divisible by 2
guillaume@ubuntu:~/0x03$ 
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x03-python-data_structures
File: 10-divisible_by_2.py
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
13. Linked list palindrome
mandatory
Préparation de l'entretien technique :

Vous n'êtes pas autorisé à rechercher quoi que ce soit sur Google
Tableau blanc d'abord
Écrivez une fonction en C qui vérifie si une liste simplement chaînée est un palindrome.

Prototype : int is_palindrome(listint_t **head);
Retour : 0 si ce n'est pas un palindrome, 1 si c'est un palindrome
Une liste vide est considérée comme un palindrome



Technical interview preparation:

You are not allowed to google anything
Whiteboard first
Write a function in C that checks if a singly linked list is a palindrome.


carrie@ubuntu:0x03$ gcc -Wall -Werror -Wextra -pedantic 13-main.c linked_lists.c 13-is_palindrome.c -o palindrome
carrie@ubuntu:0x03$ ./palindrome
1
17
972
50
98
98
50
972
17
1
Linked list is a palindrome
carrie@ubuntu:0x03$
Repo:

GitHub repository: alx-higher_level_programming
Directory: 0x03-python-data_structures
File: 13-is_palindrome.c, lists.h
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
14. CPython #0: Python lists
#advanced
CPython est l'implémentation de référence du langage de programmation Python. Écrit en C, CPython est la valeur par 
défaut et la plupart implémentation largement utilisée du langage.
Puisque nous connaissons maintenant un peu le C, nous pouvons regarder ce qui se passe sous le capot de Python. 
Amusons-nous avec Python et C, et regardons ce qui rend Python si facile à utiliser.

Tous vos fichiers seront interprétés/compilés sur Ubuntu 14.04 LTS
Créez une fonction C qui imprime des informations de base sur les listes Python.



CPython is the reference implementation of the Python programming language. Written in C, CPython is the default and most 
widely used implementation of the language.
Since we now know a bit of C, we can look at what is happening under the hood of Python. Let’s have fun with Python and C, 
and let’s look at what makes Python so easy to use.

All your files will be interpreted/compiled on Ubuntu 14.04 LTS


Create a C function that prints some basic info about Python lists.

Prototype: void print_python_list_info(PyObject *p);
Format: see example
Python version: 3.4
Your shared library will be compiled with this command line: 
gcc -Wall -Werror -Wextra -pedantic -std=c99 -shared -Wl,-soname,PyList -o libPyList.so -fPIC -I/usr/include/python3.4 100-print_python_list_info.c
OS: Ubuntu 14.04 LTS
Start by reading:
listobject.h
object.h
Common Object Structures
List Objects
julien@ubuntu:~/CPython$ 
gcc -Wall -Werror -Wextra -pedantic -std=c99 -shared -Wl,-soname,PyList -o libPyList.so -fPIC -I/usr/include/python3.4 100-print_python_list_info.c
julien@ubuntu:~/CPython$ cat 100-test_lists.py 
import ctypes

lib = ctypes.CDLL('./libPyList.so')
lib.print_python_list_info.argtypes = [ctypes.py_object]
l = ['hello', 'World']
lib.print_python_list_info(l)
del l[1]
lib.print_python_list_info(l)
l = l + [4, 5, 6.0, (9, 8), [9, 8, 1024], "My string"]
lib.print_python_list_info(l)
l = []
lib.print_python_list_info(l)
l.append(0)
lib.print_python_list_info(l)
l.append(1)
l.append(2)
l.append(3)
l.append(4)
lib.print_python_list_info(l)
l.pop()
lib.print_python_list_info(l)
julien@ubuntu:~/CPython$ python3 100-test_lists.py 
[*] Size of the Python List = 2
[*] Allocated = 2
Element 0: str
Element 1: str
[*] Size of the Python List = 1
[*] Allocated = 2
Element 0: str
[*] Size of the Python List = 7
[*] Allocated = 7
Element 0: str
Element 1: int
Element 2: int
Element 3: float
Element 4: tuple
Element 5: list
Element 6: str
[*] Size of the Python List = 0
[*] Allocated = 0
[*] Size of the Python List = 1
[*] Allocated = 4
Element 0: int
[*] Size of the Python List = 5
[*] Allocated = 8
Element 0: int
Element 1: int
Element 2: int
Element 3: int
Element 4: int
[*] Size of the Python List = 4
[*] Allocated = 8
Element 0: int
Element 1: int
Element 2: int
Element 3: int
